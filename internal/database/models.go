// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type OtpType string

const (
	OtpTypePasswordReset     OtpType = "password_reset"
	OtpTypeEmailVerification OtpType = "email_verification"
	OtpTypeTwoFactorAuth     OtpType = "two_factor_auth"
	OtpTypeOtherType         OtpType = "other_type"
)

func (e *OtpType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OtpType(s)
	case string:
		*e = OtpType(s)
	default:
		return fmt.Errorf("unsupported scan type for OtpType: %T", src)
	}
	return nil
}

type NullOtpType struct {
	OtpType OtpType `json:"otp_type"`
	Valid   bool    `json:"valid"` // Valid is true if OtpType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOtpType) Scan(value interface{}) error {
	if value == nil {
		ns.OtpType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OtpType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOtpType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OtpType), nil
}

type Otp struct {
	ID          uuid.UUID  `json:"id"`
	Code        string     `json:"code"`
	Type        OtpType    `json:"type"`
	UserID      *uuid.UUID `json:"user_id"`
	ExpiresAt   time.Time  `json:"expires_at"`
	CreatedAt   time.Time  `json:"created_at"`
	Attempts    int32      `json:"attempts"`
	MaxAttempts int32      `json:"max_attempts"`
}

type User struct {
	ID             uuid.UUID  `json:"id"`
	Name           string     `json:"name"`
	Email          string     `json:"email"`
	HashedPassword string     `json:"hashed_password"`
	VerifiedAt     *time.Time `json:"verified_at"`
	CreatedAt      time.Time  `json:"created_at"`
	UpdatedAt      time.Time  `json:"updated_at"`
}

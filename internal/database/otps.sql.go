// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: otps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOTP = `-- name: CreateOTP :exec
INSERT INTO otps (code, type, user_id, expires_at, created_at)
VALUES ($1, $2, $5::UUID, $3, $4)
`

type CreateOTPParams struct {
	Code      string    `json:"code"`
	Type      OtpType   `json:"type"`
	ExpiresAt time.Time `json:"expires_at"`
	CreatedAt time.Time `json:"created_at"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) error {
	_, err := q.db.Exec(ctx, createOTP,
		arg.Code,
		arg.Type,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UserID,
	)
	return err
}

const deleteOTP = `-- name: DeleteOTP :exec
DELETE FROM otps
WHERE id = $1::UUID
`

func (q *Queries) DeleteOTP(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOTP, id)
	return err
}

const expireOTP = `-- name: ExpireOTP :exec
UPDATE otps
SET expires_at = CURRENT_TIMESTAMP - INTERVAL '1 second'
WHERE id = $1::UUID
`

func (q *Queries) ExpireOTP(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, expireOTP, id)
	return err
}

const getLatestOTP = `-- name: GetLatestOTP :one
SELECT id, code, type, user_id, expires_at, created_at, attempts, max_attempts FROM otps
WHERE user_id = $2::UUID AND type = $1
ORDER BY created_at DESC
LIMIT 1
`

type GetLatestOTPParams struct {
	Type   OtpType   `json:"type"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetLatestOTP(ctx context.Context, arg GetLatestOTPParams) (Otp, error) {
	row := q.db.QueryRow(ctx, getLatestOTP, arg.Type, arg.UserID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Type,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Attempts,
		&i.MaxAttempts,
	)
	return i, err
}

const incrementOTPAttempts = `-- name: IncrementOTPAttempts :exec
UPDATE otps
SET attempts = attempts + 1
WHERE id = $1::UUID
`

func (q *Queries) IncrementOTPAttempts(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementOTPAttempts, id)
	return err
}

const invalidateExistingOTP = `-- name: InvalidateExistingOTP :exec
DELETE FROM otps
WHERE user_id = $2::UUID AND type = $1
`

type InvalidateExistingOTPParams struct {
	Type   OtpType   `json:"type"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) InvalidateExistingOTP(ctx context.Context, arg InvalidateExistingOTPParams) error {
	_, err := q.db.Exec(ctx, invalidateExistingOTP, arg.Type, arg.UserID)
	return err
}
